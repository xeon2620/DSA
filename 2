Static block and Constructor:
Constructor are noting but they used to initialize the object.
For every class there will be a default constructor,whenever we create object constructor will be called than object will be created.
Constructor having class name for method properties.
EX:- we created 2 objects 2 times constructor will be called:

public class q2{
    public static void main(String args[]){
        Demo d1 = new Demo();
        Demo d2 = new Demo();
    }
}
class Demo{
    static{
        System.out.println("Static Block");
        
    }
    Demo(){
        System.out.println("Constructor");
    }
}

static block will be created with the static keyword.it will call automatically no need to call with later object or class

static method
for static method no need to call with object you can directly call with class name and here static will act as instance or object

class Main{
    public static void main(String args[])
    {
        Person obj= new Person();
        obj.setAge(24);
        obj.setName("manthan");
        obj.setPassedOut(true);
        obj.setMarks(24);
        obj.setERP(22);
        int res = obj.getAge();
        String namew = obj.getName();
        boolean es = obj.getPassedOut();
        float s = obj.getMarks();
        long re = obj.getERP();
        System.out.println(res);
        System.out.println(namew);
        System.out.println(es);
        System.out.println(s);
        System.out.println(re);
    }
}
class Person {
    int age;
    String name;
    boolean passedOut;
    float marks;
    long erp;

    void setAge(int age1){
        this.age = age1;
    }
    int getAge(){
        return age;
    }

    void setName(String name1){
        this.name = name1;
    }
    String getName(){
        return name;
    }

    void setPassedOut(boolean passedOut1){
        this.passedOut = passedOut1;
    }
    boolean getPassedOut(){
        return passedOut;
    }

    void setMarks(float marks){
        this.marks = marks;
    }
    float getMarks(){
        return marks;
    }

    void setERP(long erp1){
        this.erp = erp1;
    }
    long getERP(){
        return erp;
    }
}

public class Fibonacci {
    public static int fibonacci(int n) {
        if (n <= 0) {
            return 0;
        } else if (n == 1) {
            return 1;
        } else {
            return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    public static void main(String[] args) {
        int terms = 10;
        System.out.println("Fibonacci Series:");
        for (int i = 0; i < terms; i++) {
            System.out.print(fibonacci(i) + " ");
        }
    }
}


public class FactorialExample {
    public static int factorial(int n) {
        if (n <= 1) {
            return 1;
        } else {
            return n * factorial(n - 1);
        }
    }

    public static void main(String[] args) {
        int number = 5;
        System.out.println("Factorial of " + number + " is " + factorial(number));
    }
}


if else loop
if else ladder
switch case
conditional statements are used to check the condition and to print the relevant block in constant time


