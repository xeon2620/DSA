Arrays:-
Collection of similar kind of data with continuous allocation.
In C&C++ we have pointer so definetely elements will be stored in continuous format.
In Java we dont have pointers than there is a chance of elements might store at random location. 

Syntax:-
Datatypes[] Arrayname


Primitive datatypes can't be splitted or divided no primitive datatypes can be divided.
ex:-int float char.
NP ex:- string array & all the obj that were created by user.

class node{
    int data;
    node next; 
    }
After this all the obj will be stored in Heap memory ,all the referrence will be stored in stack memory.
Stack memory having less space compared to Heap.

import java.util.*;
class Main{
    public static void Main(String arg[]){
        
        int a=10;
        int b=12;
        int c=14;
        int d=16;
        
        int[] arr= {10,12,14,16};
    }
}



All the variable storing same datatype instead of creating multiple variables create an array.
If we create multiple variables to get the data simply we can print varibles.
when it comes to array we want to print the data we can print using index values and by default index values will start with 0.

import java.util.*;
class Main{
    public static void Main(String arg[]){
        int[] arr= {10,12,14,16};
    }
}
Declaration and intialization happened at same line.

import java.util.*;
class Main{
    public static void Main(String arg[]){
        int[] arr;---1
        arr = {10,12,14,16};--2
    }
}
1 decalariton
2-Initialization both at different place

import java.util.*;
class Main{
    public static void main(String arg[]){
        int[] arr= {10,12,14,16};
        for(int i=0;i<arr.length;i++){
            System.out.println(arr[i]);
        }
    }
}

To get the length of array we have method called arrayname.length and in String it it String_name.length.

Camel case and Snake case:-
Camel case : arrayName
Snake case : array_name

In Java it is preffered to use camel case to write production level code,
production level code in the sense ex:- 
void additionOfTwoNumbers(){
     }

Type of Printing Formats:-

1.You can print the value using for loop:
import java.util.*;
class Main{
    public static void main(String arg[]){
        int[] arr= {10,12,14,16};
        for(int i=0;i<arr.length;i++){
            System.out.print(arr[i]+" ");
        }
    }
}

2.You can print the value using for each loop:
import java.util.*;
class Main{
    public static void main(String arg[]){
        int[] arr= {10,12,14,16};
        for(int i:arr){
            System.out.print(i+" ");
        }
    }
}
 
In for-each loop we don't need index values 

3.toString:-
import java.util.*;
class Main{
    public static void main(String arg[]){
        int[] arr= {10,12,14,16};
        System.out.print(Arrays.toString(arr));
    }
}
It is an inbuilt method to print an Array.It can accept only one argument and that to Array .
This are the three method we can print array.


Declaring the size of an Array initializing the values later.
import java.util.*;
class Main{
    public static void main(String arg[]){
        int[] arr= new int[5];
        System.out.print(arr[0]);
    }
}
Array having fixed size if we declare an array size it can't be change 
before = array referrence first created with the help of new keyword actual object will be created in the heap memory for the particular datatype and size
IF the array type is int all the default values are 0 and if it is a String  all the default values are null and null is a literal.


import java.util.*;
class Main{
    public static void main(String arg[]){
        int[] arr= new int[5];
        arr[0]=1;
        arr[1]=2;
        arr[2]=3;
        arr[3]=4;
        arr[4]=5;
        
        for(int i=0;i<arr.length;i++){
            System.out.println(arr[i]);
        }
    }
}


------------------------------------------------------------------------------------------------------------------------------------------------------

import java.util.*;
class Main{
    public static void main(String arg[]){
        int[] arr= new int[5];
        Scanner sc= new Scanner(System.in);
        for(int i=0;i<arr.length;i++){
            System.out.println("Enter the "+i+" element");
            int a= sc.nextInt();
            arr[i]=a;
            
            
        }
        System.out.println("Values of your array are:");
        for(int i=0;i<arr.length;i++){
            
            System.out.println(arr[i]);
            
        }
    }
}
whenever trying to assign or trying to get nth value of array you will get of an array you will get an execption called array out of bound.
------------------------------------------------------------------------------------------------------------------------------------------------------
 
check array is sorted or not :

public class Main {
    public static boolean isSorted(int[] arr) {
        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] > arr[i + 1]) {
                return false; // not sorted
            }
        }
        return true; // sorted
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5};
        if (isSorted(arr)) {
            System.out.println("Array is sorted");
        } else {
            System.out.println("Array is not sorted");
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------


check element is present in array or not:
public class Main {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5, 6};
        int target = 4;
        if (contains(arr, target)) {
            System.out.println("Number Found");
        } else {
            System.out.println("Not Found");
        }
    }

    public static boolean contains(int[] arr, int target) {
        for (int i : arr) {
            if (i == target) {
                return true;
            }
        }
        return false;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------

[1,0,1,0,1,0] move all zeros to one side[1,1,1,0,0,0]:

public class Main {
    public static void moveZeros(int[] arr) {
        int nonZeroIndex = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] != 0) {
                // Swap arr[i] with arr[nonZeroIndex]
                int temp = arr[i];
                arr[i] = arr[nonZeroIndex];
                arr[nonZeroIndex] = temp;
                nonZeroIndex++;
            }
        }
    }

    public static void printArray(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int[] arr = {1, 0, 1, 0, 1, 0};
        System.out.println("Original array:");
        printArray(arr);
        moveZeros(arr);
        System.out.println("Array after moving zeros:");
        printArray(arr);
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------
write a code swap two number:
public class Main {
    public static void swap(int a, int b) {
        a = a ^ b;
        b = a ^ b;
        a = a ^ b;
        System.out.println("a = " + a);
        System.out.println("b = " + b);
    }

    public static void main(String[] args) {
        int x = 5;
        int y = 10;
        System.out.println("Before swap:");
        System.out.println("x = " + x);
        System.out.println("y = " + y);
        swap(x, y);
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------
maximum consecutive ones:
{1,0,1,0,1,1,1,0,1,1}
public class MaxConsecutiveOnes {
    public static int findMaxConsecutiveOnes(int[] arr) {
        int maxCount = 0, currentCount = 0;
        for (int num : arr) {
            if (num == 1) {
                currentCount++;
                maxCount = Math.max(maxCount, currentCount);
            } else {
                currentCount = 0;
            }
        }
        return maxCount;
    }

    public static void main(String[] args) {
        int[] array = {1, 1, 0, 1, 1, 1, 0, 1, 1};
        System.out.println("Maximum consecutive 1s: " + findMaxConsecutiveOnes(array));
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------
find the missing element in the sorted array:
import java.util.*;
class Main{
    public static void main(String arg[]){
        int[] arr= {1,2,3,5,6,7,8,9};
        int missing=0;
        for(int i=0;i<arr.length;i++){
            if(arr[i]!=i+1){
                missing=missing+(i+1);
                break;
            }
        }
        System.out.print("The missing value is"+missing);
    }
}
